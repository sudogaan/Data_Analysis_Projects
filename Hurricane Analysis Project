#This project was written to organize and manipulate data about Category 5 Hurricanes, the strongest hurricanes as rated by their wind speed. 

# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
conversion = {"M": 1000000, "B": 1000000000}

#updating damage values
def damages_update(damage_list):
    damages_mod = []
    for damage in damage_list:
        if damage[-1:] == 'M':
            mod = float(damage[:-1])*1000000
            damages_mod.append(mod)
        elif damage[-1:] == 'B':
            mod = float(damage[:-1])*1000000000
            damages_mod.append(mod)
        else:
            damages_mod.append(damage)
    return damages_mod 

damages_new = damages_update(damages)
# print(damages_new)

#creating a dictionary of all information that we have 

def hurricanes_dictionary(Name, Month, Year, Max_Sustained_Wind, Areas_Affected, Damage, Death):
    hurricane_dic = {}
    for i in range(0, len(names)):
        hurricane = {}
        # First we update the list of hurricane's data
        hurricane.update({'Name': Name[i], 'Month': Month[i], 'Year': Year[i],
                      'Max Sustained Winds': Max_Sustained_Wind[i],
                      'Areas Affected': Areas_Affected[i],'Damage': Damage[i],
                      'Deaths': Death[i]})
        # The we update the hurricane of hurricane's dictionary
        hurricane_dic.update({names[i]: hurricane})
    return hurricane_dic

hurricanes = hurricanes_dictionary(names, months, years, max_sustained_winds, areas_affected, damages_new, deaths)

#print(hurricanes)

#organizing the dictionary by making years the keys.

def hurricanes_per_year(dictionary):
  hurricanes_dic = {}
  for k in range(0, len(years)):
    hurricanes_dic[years[k]] = [{"Name": names[k], "Month": months[k], "Year": years[k], "Max Sustained_Wind": max_sustained_winds[k], "Areas Affected": areas_affected[k], "Damage": damages_new[k]}]
  return hurricanes_dic
hurricanes_year = hurricanes_per_year(hurricanes)
#print(hurricanes_year)

#counting how often each area is listed as an affected areaof a hurricane

def hurricanes_areas_afected(dictionary):
    hurricanes_areas = {}
    for hurricane in dictionary.values():
        for area in hurricane['Areas Affected']:
            if area in hurricanes_areas.keys():
                hurricanes_areas[area] += 1
            else:
                hurricanes_areas[area] = 1
    return hurricanes_areas

areas_affected = hurricanes_areas_afected(hurricanes)
#print(areas_affected)

#finding the are affected by most hurricanes 

def most_affected_area(dictionary):
  max_area = ''
  max_area_count = 0
  for areas in dictionary.items():
    if areas[1] > max_area_count:
      most_affected_areas = areas[0]
      max_area_count = areas[1]
  return (most_affected_areas, max_area_count)

max_affected = most_affected_area(areas_affected)
#print(max_affected)


#finding the hurricane that caused the greatest number of deaths

def max_deaths(dictionary):
  max_mortality_cane = ''
  max_mortality = 0
  for mortality in dictionary.items():
    if mortality[1]['Deaths'] > max_mortality:
      max_mortality = mortality[1]['Deaths']
      max_mortality_cane = mortality[0]
  return (max_mortality_cane, max_mortality)
most_mortality = max_deaths(hurricanes)
#print(most_mortality)

#rating hurricanes based on the mortality scale 

def scale_of_mortality(dictionary):
  hurricanes_by_mortality = {0:[], 1:[], 2:[], 3:[], 4:[], 5:[]}
  for mortality in dictionary.items():
    if mortality[1]['Deaths'] == 0:
      hurricanes_by_mortality[0]['0'].append(mortality[0])
    elif 100 >= mortality[1]['Deaths'] > 0:
      hurricanes_by_mortality[1].append(mortality[0])
    elif 500 >= mortality[1]['Deaths'] > 100:
      hurricanes_by_mortality[2].append(mortality[0])
    elif 1000 >= mortality[1]['Deaths'] > 500:
      hurricanes_by_mortality[3].append(mortality[0])
    elif 10000 >= mortality[1]['Deaths'] > 1000:
      hurricanes_by_mortality[4].append(mortality[0])
    elif mortality[1]['Deaths'] > 10000:
      hurricanes_by_mortality[5].append(mortality[0])
  return hurricanes_by_mortality
mortality_of_hurricanes = scale_of_mortality(hurricanes)
#print(mortality_of_hurricanes)

#finding the hurricane that caused the greatest damage and its cost

def greatest_damage(dictionary):
  max_damage_cane = ''
  max_damage = 0
  for damages in dictionary.items():
    if damages[1]['Damage'] == 'Damages not recorded':
      max_damage = 0
      max_damage_cane = 'Damages not recorded'
    elif damages[1]['Damage'] > max_damage:
      max_damage = damages[1]['Damage']
      max_damage_cane = damages[0]
  return (max_damage_cane, max_damage)
highest_damage = greatest_damage(hurricanes)
#print('The greatest damage was caused by ' + str(highest_damage[0]) + ', and the cost was ' + str(highest_damage[1]) + ' dollars.')

#rating the hurricanes based on the damage scale 

def damage_of_hurricanes(dictionary):
  hurricanes_by_damage = {0:[], 1:[], 2:[], 3:[], 4:[], 5:[]}
  for damage in dictionary.items():
    if damage[1]['Damage'] == 'Damages not recorded':
      continue
    elif damage[1]['Damage'] == 0:
      hurricanes_by_damage[0]['0'].append(damage[0])
    elif 100000000 >= damage[1]['Damage'] > 0:
      hurricanes_by_damage[1].append(damage[0])
    elif 1000000000 >= damage[1]['Deaths'] > 100000000:
      hurricanes_by_damage[2].append(damage[0])
    elif 10000000000 >= damage[1]['Deaths'] > 100000000:
      hurricanes_by_damage[3].append(damage[0])
    elif 50000000000 >= damage[1]['Deaths'] > 10000000000:
      hurricanes_by_damage[4].append(damage[0])
    elif damage[1]['Deaths'] > 50000000000:
      hurricanes_by_damage[5].append(damage[0])
  return hurricanes_by_damage
hurricane_damage_costs = damage_of_hurricanes(hurricanes)
#print(hurricane_damage_costs)
